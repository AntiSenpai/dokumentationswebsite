{# templates/customer/detail.html.twig #}
{% extends 'base.html.twig' %}

{% block body %}
<link rel="stylesheet" href="{{ asset('css/detail.css') }}">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest"></script> <!-- Editor.js -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/header@latest"></script> <!-- Header Tool -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/simple-image@latest"></script> <!-- Image Tool -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/list@latest"></script> <!-- List Tool -->
<script src="https://cdn.jsdelivr.net/npm/@editorjs/table@latest"></script> <!-- Table Tool -->

<body>
    <div id="wrapper">
        <!-- Sidebar -->
        <nav id="sidebar">
            <div class="sidebar-header">
                <h3 class="customer-name">{{ customer.name }}</h3>
            </div>

            <ul class="list-unstyled components">
<li class="active">
<a href="#allgemeinContent" class="sidenav-link"><i class="fas fa-info-circle icon"></i> Allgemein</a>
</li>
<li>
<a href="#netzContent" class="sidenav-link"><i class="fas fa-network-wired icon"></i> Netz</a>
</li>
<li>
<a href="#serverContent" class="sidenav-link"><i class="fas fa-server icon"></i> Server</a>
</li>
<li>
<a href="#clientsContent" class="sidenav-link"><i class="fas fa-desktop icon"></i> Clients</a>
</li>
<li>
<a href="#userPwdContent" class="sidenav-link"><i class="fas fa-user-lock icon"></i> User /Pwd's</a>
</li>
<li>
<a href="#routerFirewallContent" class="sidenav-link"><i class="fas fa-shield-alt icon"></i> Router/Firewall</a>
</li>
<li>
<a href="#providerContent" class="sidenav-link"><i class="fas fa-plug icon"></i> Provider</a>
</li>
<li>
<a href="#remoteMaintenanceContent" class="sidenav-link"><i class="fas fa-tools icon"></i> Fernwartung</a>
</li>
<li>
<a href="#backupContent" class="sidenav-link"><i class="fas fa-copy icon"></i> Backup</a>
</li>
<li>
<a href="#upsContent" class="sidenav-link"><i class="fas fa-battery-three-quarters icon"></i> USV</a>
</li>
<li>
<a href="#antivirusContent" class="sidenav-link"><i class="fas fa-virus icon"></i> Antivirus/Software</a>
</li>
<li>
<a href="#applicationSoftwareContent" class="sidenav-link"><i class="fas fa-th-list icon"></i> Anwendersoftware</a>
</li>
<li>
<a href="#otherInfoContent" class="sidenav-link"><i class="fas fa-asterisk icon"></i> Sonstige Informationen</a>
</li>    
    <div id="editContent" class="edit-section">
        <div class="edit-controls">
            <button id="editButton" class="btn btn-primary">Inhalt bearbeiten</button>
            <br>
            <a href="/doku/kundendoku" id="backButton" class="btn btn-secondary">Zurück</a>
        </div>
    </div>
</ul>
</nav>
    <!-- Page Content -->
<div id="content">
    <!-- Placeholder for Allgemein content; this will be shown by default -->
    <div id="allgemeinContent" class="content-section active">
        <div class="section allgemein">
            <h2>Allgemein</h2>
            
            <!-- Card für Kundeninformation -->
            <div class="card">
                <div class="card-header">
                    Kundeninformationen
                </div>
                <div class="card-body">
                    <p><strong>ID:</strong> {{ customer.id }}</p>
                    <p><strong>Name:</strong> {{ customer.name }}</p>
                    <strong>Unterstandorte:</strong>
                    <ul>
                        <li>
                           
                        </li>
                    </ul>
                </div>
            </div>

            <!-- Card für Ansprechpartner -->
            
            <div class="card editable-card-table">
                <div class="card-header">
                    Ansprechpartner
                </div>
                <div class="card-body">

                </div>
            </div>

        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
        <button class="btn btn-success saveContentBtn fa-solid fa-file-circle-check"></button>
    </div>


    <div id="netzContent" class="content-section" style="display: none;">
        <div class="section netz">
            <h2>Netz</h2>


            <div class="card editable-card">
                <div class="card-header">Netzwerk Topologie</div>
                <div class="card-body">
                </div>
            </div>

            <!-- Card for IP-Adressen -->
            <div class="card editable-card-table">
                <div class="card-header">
                    IP-Adressen
                </div>
                <div class="card-body">
                    
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>

    <div id="serverContent" class="content-section" style="display: none;">
        <div class="section server">
            <h2>Server</h2>

            <!-- Card for Server Topologie -->
            <div class="card editable-card">
                <div class="card-header">Server Topologie</div>
                <div class="card-body">
                </div>
            </div>

            <!-- Card for IP-Adressen -->
            <div class="card editable-card-table">
                <div class="card-header">IP-Adressen</div>
                <div class="card-body">
                    
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>

    <div id="clientsContent" class="content-section" style="display: none;">
        <div class="section clients">
            <h2>Clients (Allgemein)</h2>

            <!-- Card for Netzwerk Topologie -->
            <div class="card editable-card">
                <div class="card-header">Informationen</div>
                <div class="card-body">
                </div>
            </div>

            <!-- Card for IP-Adressen -->
            <div class="card editable-card-table">
                <div class="card-header">Clients</div>
                <div class="card-body">
                    
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>

    <div id="userPwdContent" class="content-section" style="display: none;">
        <div class="section userpwd">
            <h2>User / Pwd´s</h2>

            <!-- Card for Netzwerk Topologie -->
            <div class="card editable-card">
                <div class="card-header">Allgemein</div>
                <div class="card-body">
                </div>
            </div>

            <!-- Card for IP-Adressen -->
            <div class="card editable-card-table">
                <div class="card-header">User / Passwörter</div>
                <div class="card-body">
                    
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>

    <div id="routerFirewallContent" class="content-section" style="display: none;">
        <div class="section routerfirewall">
            <h2>Router Firewall</h2>


            <div class="card editable-card">
                <div class="card-header">Topologie</div>
                <div class="card-body">
                </div>
            </div>


            <div class="card editable-card-table">
                <div class="card-header">Router oder Firewall</div>
                <div class="card-body">
                    
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>

    <div id="providerContent" class="content-section" style="display: none;">
        <div class="section provider">
            <h2>Provider</h2>

            <!-- Card for Topologie -->
            <div class="card editable-card">
                <div class="card-header"> Topologie</div>
                <div class="card-body">

                </div>
            </div>

            <!-- Card for IP-Adressen -->
            <div class="card editable-card-table">
                <div class="card-header">Provider</div>
                <div class="card-body">
                    
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>

    <div id="remoteMaintenanceContent" class="content-section" style="display: none;">
        <div class="section remotemaintenance">
            <h2>Fernwartung</h2>

            <!-- Card for Netzwerk Topologie -->
            <div class="card editable-card">
                <div class="card-header">Topologie</div>
                <div class="card-body">

                </div>
            </div>

            <!-- Card for IP-Adressen -->
            <div class="card editable-card-table">
                <div class="card-header">Fernwartung</div>
                <div class="card-body">
                   
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>


    <div id="backupContent" class="content-section" style="display: none;">
        <div class="section backup">
            <h2>Backup</h2>

            <!-- Card for Netzwerk Topologie -->
            <div class="card editable-card">
                <div class="card-header">Topologie</div>
                <div class="card-body">

                </div>
            </div>

            <!-- Card for IP-Adressen -->
            <div class="card editable-card-table">
                <div class="card-header">Backup</div>
                <div class="card-body">
                   
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>

    <div id="upsContent" class="content-section" style="display: none;">
        <div class="section ups">
            <h2>USV</h2>

            <!-- Card for Netzwerk Topologie -->
            <div class="card editable-card">
                <div class="card-header">Topologie</div>
                <div class="card-body">

                </div>
            </div>

            <!-- Card for IP-Adressen -->
            <div class="card editable-card-table">
                <div class="card-header">USV:</div>
                <div class="card-body">
                    
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>

    <div id="antivirusContent" class="content-section" style="display: none;">
        <div class="section antivirus">
            <h2>Antivirus / Software</h2>

            <!-- Card for Netzwerk Topologie -->
            <div class="card editable-card">
                <div class="card-header">Topologie</div>
                <div class="card-body">

                </div>
            </div>

            <!-- Card for IP-Adressen -->
            <div class="card editable-card-table">
                <div class="card-header">Antivirus-Software</div>
                <div class="card-body">
                   
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>

    <div id="applicationSoftwareContent" class="content-section" style="display: none;">
        <div class="section applicationsoftware">
            <h2>Anwendersoftware</h2>

            <!-- Card for Netzwerk Topologie -->
            <div class="card editable-card">
                <div class="card-header">Topologie</div>
                <div class="card-body">
                </div>
            </div>

            <!-- Card for IP-Adressen -->
            <div class="card editable-card-table">
                <div class="card-header">Anwendersoftware</div>
                <div class="card-body">
                   
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>

    <div id="otherInfoContent" class="content-section" style="display: none;">
        <div class="section otherinfo">
            <h2>Sonstige Informationen</h2>

            <div class="card editable-card-table">
                <div class="card-header">Sonstiges</div>
                <div class="card-body">
                   
                </div>
            </div>
        </div>
        <button id="addCardBtn" class="btn btn-primary addCardBtn">Neue Karte</button>
    </div>





    <!-- Weitere content-sections hier hinzufügen ... -->
    <!-- Button zum Hinzufügen neuer Cards -->
</div>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const sidebarLinks = document.querySelectorAll('#sidebar .sidenav-link');
    const contentSections = document.querySelectorAll('.content-section');
    const backButton = document.getElementById('backButton');
    const editButton = document.getElementById('editButton');
    let editMode = localStorage.getItem('editMode') === 'true';

    function adjustTableHeight() {
        document.querySelectorAll('.card-body .ce-table__content').forEach(table => {
            let cardBodyHeight = table.closest('.card-body').clientHeight;
            table.style.height = cardBodyHeight + 'px';

            let tableHeight = table.scrollHeight;
            if(tableHeight > cardBodyHeight) {
                table.closest('.card').style.height = (table.closest('.card').clientHeight + (tableHeight - cardBodyHeight)) + 'px';
            }
        });
    }

    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                adjustTableHeight();
            }
        });
    });

    document.querySelectorAll('.card-body .ce-table__content').forEach(table => {
        observer.observe(table, { childList: true, subtree: true });
    });
    
    function adjustTableSize() {
        document.querySelectorAll('.card-body .ce-table').forEach(table => {
            table.style.width = '100%';
        });
    }
    
    function hideAllSections() {
        contentSections.forEach(section => section.style.display = 'none');
    }

    function showSection(sectionId) {
        const section = document.getElementById(sectionId);
        if (section) {
            section.style.display = 'block';
        }
    }

    function updateEditModeUI() {
        editButton.textContent = editMode ? 'Bearbeitungsmodus aktiv' : 'Bearbeitungsmodus inaktiv';
        editButton.style.color = editMode ? 'lightgreen' : 'lightcoral';
        document.querySelectorAll('.addCardBtn').forEach(btn => {
            btn.style.display = editMode ? 'block' : 'none';
        });
        updateDeleteButtonsVisibility(editMode);
    }

    function toggleEditableCards() {
        const editableCards = document.querySelectorAll('.editable-card, .editable-card-table');
        editableCards.forEach(card => {
            if (card.editorInstance && typeof card.editorInstance.readOnly !== 'undefined') {
                card.editorInstance.readOnly.toggle(!editMode);
            }
            // Hier könnte man weitere Aktionen durchführen, die abhängig vom editMode sind
        });
    }

    function updateDeleteButtonsVisibility(editMode) {
        const deleteButtons = document.querySelectorAll('.delete-btn');
        deleteButtons.forEach(btn => {
            btn.style.display = editMode ? 'block' : 'none';
        });
    }

      function initializeDeleteButton(card) {
        const cardHeader = card.querySelector('.card-header');
        if (!cardHeader) {
            console.error('Card-Header-Element nicht gefunden in', card);
            return;
        }
        let deleteIcon = cardHeader.querySelector('.delete-btn');
        if (!deleteIcon) {
            deleteIcon = document.createElement('button');
            deleteIcon.className = ' fas fa-trash';
            deleteIcon.title = 'Löschen';
            deleteIcon.style.cssText = 'cursor: pointer; float: right; width: 20px; border: none; background-color: transparent; height: 20px;';
            cardHeader.appendChild(deleteIcon);

            deleteIcon.addEventListener('click', function(event) {
                event.stopPropagation();
                if (!confirm('Willst du dieses Element löschen?')) return;
                card.remove();
            });
        }
    }
    
    function initializeEditorJSForEditableCards(card) {
        const cardBody = card.querySelector('.card-body');
        if(!cardBody) { console.error('Karten Element nicht gefunden in', card); return; }

        card.editorInstance = new EditorJS({
            holder: cardBody,
            tools: {
                header: Header,
                list: List,
                image: SimpleImage,
                paragraph: {
                    config: {
                        placeholder: 'Hier Topologie zur Sektion ...'
                    }
                }
            },
            readOnly: !editMode,
        
        });
    }

    function initializeEditorJSForTables(card) {
        const cardBody = card.querySelector('.card-body');
        if (!cardBody) { console.error('Karten Element nicht gefunden in', card); return; }

        const initialData = getInitialDataForCard(card);

        card.editorInstance = new EditorJS({
            holder: cardBody,
            tools: { table: Table},
            data: initialData,
            readOnly: !editMode,
            onReady: function() {

                const addButton = cardBody.querySelector('.ce-toolbar--opened');
                if(addButton) {
                addButton.style.display = "none !important";
                addButton.parentElement.style.display = "none !important";
                addButton.style.opacity = "0";
                addButton.style.position = "absolute";
                }
                const emptyBlock = cardBody.querySelector('.ce-block .ce-paragraph');
                if (emptyBlock && emptyBlock.innerHTML.trim() === '') {
                    emptyBlock.parentNode.parentNode.remove();
                }
            },
        });
    }

    function handleSubLocationClick(locationId) {
        console.log('Sublocation clicked', locationId);
    }

    function getInitialDataForCard(card) {
    // Allgemein Sektion
    if(card.closest('.section.allgemein')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Ansprechpartner", "Telefon", "Mobil", "E-Mail"],
                        ["Technisch:", "", "", ""],
                        ["Vor Ort:", "", "", ""]
                    ]
                }
            }]
        };
    }
    // Netz Sektion
    else if(card.closest('.section.netz')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Netzwerk (IP)", "Domäne", "Gateway", "DNS"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // Server Tabelle
    else if(card.closest('.section.server')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Server", "IP", "Admin-User/Passwort", "Zugriff"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // Clients Tabelle
    else if(card.closest('.section.clients')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Hersteller", "IP-Range/DHCP", "Anzahl/Alter", "Sonstiges"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // User / Pwd´s Tabelle
    else if(card.closest('.section.userpwd')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Domänenbenutzer", "Passwort", "Benutzer wenn bekannt", "Sonstiges"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // Router / Firewall Tabelle
    else if(card.closest('.section.routerfirewall')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Typ", "IP", "Admin-User/Passwort", "Zugriff"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // Provider Tabelle
    else if(card.closest('.section.provider')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Provider-DSL", "Benutzername", "Passwort", "Tarif/Sonstiges"],
                        ["", "", "", ""],
                        ["Provider-Mail", "Benutzername", "Passwort", "pop3/smtp-Server"],
                        ["", "", "", ""],
                        ["Provider-WWW", "Benutzername", "Passwort", "Admin-URL"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // Fernwartung Tabelle
    else if(card.closest('.section.remotemaintenance')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["VPN-Gateway (IP)", "VPN-Typ", "User / Passwort", "PSK"],
                        ["", "", "", ""],
                        ["Typ (RDP/VNC)", "IP / DNS-Name", "Admin-User / Passwort", "Zugriff (VPN/Direkt)"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // Backup Tabelle
    else if(card.closest('.section.backup')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Software", "Server", "Hardware", "Anmerkungen"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // USV Tabelle
    else if(card.closest('.section.ups')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Netzwerk (IP)", "Domäne", "Gateway", "DNS"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // Antivirus / Software Tabelle
    else if(card.closest('.section.antivirus')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Software", "Server/Clients", "Admin-User/Passwort", "Version / Sonstiges"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // Anwendersoftware Tabelle
    else if(card.closest('.section.applicationsoftware')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    withHeadings: true,
                    content: [
                        ["Software", "Server/Clients", "Admin-User/Passwort", "Version / Sonstiges"],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
    // Sonstige Informationen Tabelle
    else if(card.closest('.section.otherinfo')) {
        return {
            blocks: [{
                type: "table",
                data: {
                    content: [
                        ["Sonstige Anwendungen/Informationen"],
                        [""]
                    ]
                }
            }]
        };
    }
    // Fallback
    else {
        return {
            blocks: [{
                type: "table",
                data: {
                    content: [
                        ["", "", "", ""],
                        ["", "", "", ""]
                    ]
                }
            }]
        };
    }
}

    function saveContent(editorInstance, sectionId) {
    editorInstance.save().then((outputData) => {
        fetch('/save-documentation', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                documentId: sectionId, // Stellen Sie sicher, dass dies die eindeutige ID der Dokumentation oder des Abschnitts ist
                content: outputData,
            }),
        })
        .then(response => response.json())
        .then(data => {
            console.log('Success:', data);
            alert('Inhalte erfolgreich gespeichert!');
        })
        .catch((error) => {
            console.error('Error:', error);
            alert('Fehler beim Speichern der Inhalte.');
        });
    }).catch((error) => {
        console.error('Saving failed:', error);
    });
    }

    
    sidebarLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            hideAllSections();
            const sectionId = this.getAttribute('href').substring(1);
            showSection(sectionId);
            sidebarLinks.forEach(lnk => lnk.parentElement.classList.remove('active'));
            this.parentElement.classList.add('active');
        });
    });

    backButton.addEventListener('click', function() {
        editMode = false;
        localStorage.setItem('editMode', editMode);
        updateEditModeUI();
        toggleEditableCards();
    });

    const deleteButtons = document.querySelectorAll('.editable-card-table .editable-card .delete-btn');
        deleteButtons.forEach(btn => {
            btn.style.display = editMode ? 'block' : 'none';
            btn.addEventListener('click', function(event) {
                event.stopPropagation();
                if (!confirm('Confirm deletion')) return;
                btn.closest('.card').remove();
            });
        });

    editButton.addEventListener('click', function() {
        editMode = !editMode;
        localStorage.setItem('editMode', editMode);
        updateEditModeUI();
        toggleEditableCards();
    });

    document.querySelectorAll('.editable-card-table, .editable-card').forEach(card => {
        if(card.classList.contains('editable-card-table')) {
            initializeEditorJSForTables(card);
            console.log("Erfolgreich!");
        } else if(card.classList.contains('editable-card')) {
            initializeEditorJSForEditableCards(card); 
            console.log("Erfolgreich! 2");
        }
        initializeDeleteButton(card);
    });

    document.querySelectorAll('.saveContentBtn').forEach(button => {
        button.addEventListener('click', function() {
            const sectionId = this.closest('.content-section').id;
            const editorInstance = window['editorInstance_${sectionId}'];
            if(editorInstance) {
                saveContent(editorInstance, sectionId);
            } else {
                console.error('Editor-Instanz nicht gefunden für', sectionId);
            }
        });
    });


    document.querySelectorAll('.addCardBtn').forEach(addCardBtn => {
        addCardBtn.addEventListener('click', function() {
            if (!editMode) return;

            let cardTitle = prompt("Geben Sie den Titel der neuen Karte ein", "Neue Karte");
            let newCard = document.createElement('div');
            newCard.className = 'card editable-card';
            newCard.innerHTML = `<div class="card-header">${cardTitle}<button class="delete-btn" style="display: none;"><i class="fa-solid fa-circle-xmark"></i></button></div>` +
                                `<div class="card-body"></div>`;

            this.closest('.content-section').querySelector('.section').appendChild(newCard);
            initializeDeleteButton(newCard);

            const editor = new EditorJS({
                holder: newCard.querySelector('.card-body'),
                tools: {
                    header: Header,
                    list: List,
                    image: SimpleImage,
                    table: Table
                }
            });
            newCard.editorInstance = editor;
        });
    });

    hideAllSections();
    updateEditModeUI();
    adjustTableSize();
    adjustTableHeight();
    toggleEditableCards();
    showSection('allgemeinContent');
    document.querySelector('#sidebar .sidenav-link[href="#allgemeinContent"]').parentElement.classList.add('active');
});
</script>
</body>
{% endblock %}